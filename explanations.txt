Q1. We iteratively check through the loop to see if any sorted substrings of 's' are anagrams with sorted 't'. 
Since the complete string s needs to be iterated the time complexity would be O(len(s)) and space complexity would be O(1). 

Q2. We loop through the elements of stirngs to check if they are palindromes and collect the maximum length palindrome.
Since we use loop within loop the time complexity is O(n^2) and space complexity O(1).

Q3. I have used Kruskal's algorithm for this problem.We basically iterate through the sorted egdes and apply find-union algorithm using 
union by rank and path compression.The principle here is to always attach smaller depth trees under root of the deeper tree.
Path comression helps in making the found root parent of node so that we dont have to traverse through all the 
internediate nodes again.Path from all nodes under root of subtree are compressed. The algorithm is called greedy 
algorithm as it picks greedily the smallest weight edge  that does not form a cycle. If 'E' is the number of edges,
sorting would take O(ElogE) time. Henc the time complexity would be O(ElogE).

Q4. We recursively traverse through the matrix based on the relative position of the root with the nodes until the root lies between 
the two nodes. So, we start with the root and see if both nodes are smaller or greater than the root. If both nodes are smaller than 
the root, it means that the nodes lie in the left sub-tree and we need to traverse left. So we find the left child(smallest child) of the root
and traverse making the child the root. Similarly, if the root is less than the two nodes then we need to traverse right(Meaning we need
to fing the lagrger child of the root and make it the root). So when we reach the root which lies between the values of nodes then it is
the LCA of the nodes.The time complexity of traversing through the matix is O(n) and space complexity O(1).

Q5. We first traverse the linked list to get its length and determine the number of elements to traverse on the second pass to get
the elememt at mth position form back. Space complexity will be O(1) since we only store the length.The time to traverse through 
the linked list twice would be O(n).