Q1. We iteratively check through the loop to see if any sorted substrings of 's' are anagrams with sorted 't'. 
Since the complete string s needs to be iterated the time complexity would be O(len(s)) and space complexity would be O(1). 

Q2. We loop through the elements of stirngs to check if they are palindromes and collect the maximum length palindrome.
Since we use loop within loop the time complexity is O(n^2) and space complexity O(1).

Q3. I have used Kruskal's algorithm for this problem.We basically iterate through the sorted egdes and apply find-union algorithm using 
union by rank and path compression.The principle here is to always attach smaller depth trees under root of the deeper tree.
Path comression helps in making the found root parent of node so that we dont have to traverse through all the 
internediate nodes again.Path from all nodes under root of subtree are compressed. The algorithm is called greedy 
algorithm as it picks greedily the smallest weight edge  that does not form a cycle. If 'E' is the number of edges,
sorting would take O(ElogE) time. Henc the time complexity would be O(ElogE).

Q4. We define a function which returns the parent(if exists) of any node given the tree and the node as an input. We then recursively collect the
parent for each node starting from n1 (then make the new parent as root) until n1 is not the root. Similarly, we recursively find the parent 
starting from node n2 and at the same time check if the parent exits in the collection of parents of node n1. The first occurence of the parent of n2 
in the collection of parents of n1 is the least common ancestor that is farthest from the root.The time complexity of traversing the matrix would be 
O(n) and space complexity O(1).

Q5. We first traverse the linked list to get its length and determine the number of elements to traverse on the second pass to get
the elememt at mth position form back. Space complexity will be O(1) since we only store the length.The time to traverse through 
the linked list twice would be O(n).